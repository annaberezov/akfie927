{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Berezovski_Project5.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "sLWJt8xfw8XY"
      ],
      "authorship_tag": "ABX9TyPeRAXhbWODdSONXBSbY03a",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/annaberezov/akfie927/blob/main/Berezovski_Project5.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Project Five\n",
        "##Anna-Maria Berezovski\n",
        "##CSC 687\n",
        "##February 28, 2022"
      ],
      "metadata": {
        "id": "ihuNAEdqDFSt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Imports and Data"
      ],
      "metadata": {
        "id": "RQjOx4xIDPIm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Pandas is mainly used for data analysis. Pandas allows importing data from various file formats \n",
        "# such as comma-separated values, JSON, SQL, Microsoft Excel. \n",
        "# Pandas allows various data manipulation operations such as merging, reshaping, selecting, \n",
        "# as well as data cleaning, and data wrangling features.\n",
        "import pandas as pd\n",
        "\n",
        "# Import matplotlib and seaborn libraries to visualize the data\n",
        "import matplotlib.pyplot as plt \n",
        "import seaborn as sns\n",
        "\n",
        "# Read raw filefrom github into a dataframe\n",
        "# Company_data: Amounts spent on different types of advertisements and the resulting Sales\n",
        "df = pd.read_csv('letters.csv')"
      ],
      "metadata": {
        "id": "0QFSutZ3DIni"
      },
      "execution_count": 149,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TD4dFqzxDq1d",
        "outputId": "906a453e-bf9e-4086-a6e5-c069e69c02cf"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 20000 entries, 0 to 19999\n",
            "Data columns (total 17 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   x-box   20000 non-null  int64 \n",
            " 1   y-box   20000 non-null  int64 \n",
            " 2   width   20000 non-null  int64 \n",
            " 3   high    20000 non-null  int64 \n",
            " 4   onpix   20000 non-null  int64 \n",
            " 5   x-bar   20000 non-null  int64 \n",
            " 6   y-bar   20000 non-null  int64 \n",
            " 7   x2bar   20000 non-null  int64 \n",
            " 8   y2bar   20000 non-null  int64 \n",
            " 9   xybar   20000 non-null  int64 \n",
            " 10  x2ybr   20000 non-null  int64 \n",
            " 11  xy2br   20000 non-null  int64 \n",
            " 12  x-ege   20000 non-null  int64 \n",
            " 13  xegvy   20000 non-null  int64 \n",
            " 14  y-ege   20000 non-null  int64 \n",
            " 15  yegvx   20000 non-null  int64 \n",
            " 16  class   20000 non-null  object\n",
            "dtypes: int64(16), object(1)\n",
            "memory usage: 2.6+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We see that there are no missing data points so the data does not need to be handled in that regard. Also, all the variables are integers so we do not need to endcode them."
      ],
      "metadata": {
        "id": "tOD8WKRfE1Sy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "eBVcvt0DmjSF",
        "outputId": "61ae49b7-26b2-49b5-d13c-3b7bf91a520f"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-1c3c92d3-3dd5-45e6-a6dc-9a5264929db3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x-box</th>\n",
              "      <th>y-box</th>\n",
              "      <th>width</th>\n",
              "      <th>high</th>\n",
              "      <th>onpix</th>\n",
              "      <th>x-bar</th>\n",
              "      <th>y-bar</th>\n",
              "      <th>x2bar</th>\n",
              "      <th>y2bar</th>\n",
              "      <th>xybar</th>\n",
              "      <th>x2ybr</th>\n",
              "      <th>xy2br</th>\n",
              "      <th>x-ege</th>\n",
              "      <th>xegvy</th>\n",
              "      <th>y-ege</th>\n",
              "      <th>yegvx</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>11</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>10</td>\n",
              "      <td>P</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7</td>\n",
              "      <td>10</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>H</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>H</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19995</th>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>10</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19996</th>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>Z</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19997</th>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19998</th>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>L</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19999</th>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>11</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20000 rows × 17 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c3c92d3-3dd5-45e6-a6dc-9a5264929db3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1c3c92d3-3dd5-45e6-a6dc-9a5264929db3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1c3c92d3-3dd5-45e6-a6dc-9a5264929db3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "       x-box  y-box  width  high  onpix  x-bar  y-bar  x2bar  y2bar  xybar  \\\n",
              "0          2      4      4     3      2      7      8      2      9     11   \n",
              "1          4      7      5     5      5      5      9      6      4      8   \n",
              "2          7     10      8     7      4      8      8      5     10     11   \n",
              "3          4      9      5     7      4      7      7     13      1      7   \n",
              "4          6      7      8     5      4      7      6      3      7     10   \n",
              "...      ...    ...    ...   ...    ...    ...    ...    ...    ...    ...   \n",
              "19995      5     10      5     8      3      4     10      7      8     12   \n",
              "19996      4      7      6     5      3      7      8      2     10     12   \n",
              "19997      4      8      4     6      4      7      8      7      4     10   \n",
              "19998      4     11      4     8      3      0      2      4      6      1   \n",
              "19999      5      9      6    11      6      8      7      6      3      8   \n",
              "\n",
              "       x2ybr  xy2br  x-ege  xegvy  y-ege  yegvx class  \n",
              "0          7      7      1      8      5      6     Z  \n",
              "1          7      9      2      9      7     10     P  \n",
              "2          2      8      2      5      5     10     S  \n",
              "3          6      8      3      8      0      8     H  \n",
              "4          7      9      3      8      3      7     H  \n",
              "...      ...    ...    ...    ...    ...    ...   ...  \n",
              "19995     10      9      2      9      2      6     C  \n",
              "19996      6      8      1      9      6      8     Z  \n",
              "19997      7      6      3      9      3      7     O  \n",
              "19998      0      7      0      8      0      8     L  \n",
              "19999      8     11      3      8      6      8     Q  \n",
              "\n",
              "[20000 rows x 17 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We will now look at the disctribution of the classes (our target variable) to ensure that when creating the test and training data, that the classes are evenly distributed to evently train and test the model."
      ],
      "metadata": {
        "id": "-PnFEpRho1P1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"class\", data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "APqH5houm45C",
        "outputId": "bbed4f4a-9ff0-496c-b58a-3cbb2ac8d1a2"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f4515eb1c50>"
            ]
          },
          "metadata": {},
          "execution_count": 152
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we will encode the class variable such that the targest values are integers and not characters"
      ],
      "metadata": {
        "id": "8YoEYr1yBQHS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scale_mapper = {'A':1, 'B':2, 'C':3, 'D':4, 'E':5, 'F':6, 'G':7, 'H':8, 'I':9, 'J':10, 'K':11, 'L':12, 'M':13, 'N':14, 'O':15,\n",
        "                'P':16, 'Q':17, 'R':18, 'S':19, 'T':20, 'U':21, 'V':22, 'W':23, 'X':24, 'Y':25, 'Z':26}\n",
        "df['class'] = df['class'].replace(scale_mapper)"
      ],
      "metadata": {
        "id": "OMOb4CAC_9c_"
      },
      "execution_count": 153,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bi_8VfQfBV3p",
        "outputId": "a6338527-4aea-4b1d-f32d-f3506d664cef"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "x-box    int64\n",
              "y-box    int64\n",
              "width    int64\n",
              "high     int64\n",
              "onpix    int64\n",
              "x-bar    int64\n",
              "y-bar    int64\n",
              "x2bar    int64\n",
              "y2bar    int64\n",
              "xybar    int64\n",
              "x2ybr    int64\n",
              "xy2br    int64\n",
              "x-ege    int64\n",
              "xegvy    int64\n",
              "y-ege    int64\n",
              "yegvx    int64\n",
              "class    int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 154
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"class\", data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "AA2pOwAhAlMz",
        "outputId": "5d06e98d-da45-47ea-c51a-a638d5ca385f"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f4516005090>"
            ]
          },
          "metadata": {},
          "execution_count": 155
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "I4bUAn3QFWol",
        "outputId": "6c84fbe1-9242-4731-bba2-56679da6b397"
      },
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-6ba6981a-7638-48ff-99fd-5b5e50a1ac22\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x-box</th>\n",
              "      <th>y-box</th>\n",
              "      <th>width</th>\n",
              "      <th>high</th>\n",
              "      <th>onpix</th>\n",
              "      <th>x-bar</th>\n",
              "      <th>y-bar</th>\n",
              "      <th>x2bar</th>\n",
              "      <th>y2bar</th>\n",
              "      <th>xybar</th>\n",
              "      <th>x2ybr</th>\n",
              "      <th>xy2br</th>\n",
              "      <th>x-ege</th>\n",
              "      <th>xegvy</th>\n",
              "      <th>y-ege</th>\n",
              "      <th>yegvx</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>11</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>10</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7</td>\n",
              "      <td>10</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19995</th>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>10</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19996</th>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19997</th>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19998</th>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19999</th>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>11</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20000 rows × 17 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ba6981a-7638-48ff-99fd-5b5e50a1ac22')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6ba6981a-7638-48ff-99fd-5b5e50a1ac22 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6ba6981a-7638-48ff-99fd-5b5e50a1ac22');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "       x-box  y-box  width  high  onpix  x-bar  y-bar  x2bar  y2bar  xybar  \\\n",
              "0          2      4      4     3      2      7      8      2      9     11   \n",
              "1          4      7      5     5      5      5      9      6      4      8   \n",
              "2          7     10      8     7      4      8      8      5     10     11   \n",
              "3          4      9      5     7      4      7      7     13      1      7   \n",
              "4          6      7      8     5      4      7      6      3      7     10   \n",
              "...      ...    ...    ...   ...    ...    ...    ...    ...    ...    ...   \n",
              "19995      5     10      5     8      3      4     10      7      8     12   \n",
              "19996      4      7      6     5      3      7      8      2     10     12   \n",
              "19997      4      8      4     6      4      7      8      7      4     10   \n",
              "19998      4     11      4     8      3      0      2      4      6      1   \n",
              "19999      5      9      6    11      6      8      7      6      3      8   \n",
              "\n",
              "       x2ybr  xy2br  x-ege  xegvy  y-ege  yegvx  class  \n",
              "0          7      7      1      8      5      6     26  \n",
              "1          7      9      2      9      7     10     16  \n",
              "2          2      8      2      5      5     10     19  \n",
              "3          6      8      3      8      0      8      8  \n",
              "4          7      9      3      8      3      7      8  \n",
              "...      ...    ...    ...    ...    ...    ...    ...  \n",
              "19995     10      9      2      9      2      6      3  \n",
              "19996      6      8      1      9      6      8     26  \n",
              "19997      7      6      3      9      3      7     15  \n",
              "19998      0      7      0      8      0      8     12  \n",
              "19999      8     11      3      8      6      8     17  \n",
              "\n",
              "[20000 rows x 17 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 156
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next we will standard scale the data"
      ],
      "metadata": {
        "id": "gctbXT06BcyZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# StandardScale the data\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "df_dropped = df.drop('class', 1)\n",
        "\n",
        "# also try MinMaxScaler\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(df_dropped)\n",
        "\n",
        "scaled_data = scaler.transform(df_dropped)\n",
        "\n",
        "scaled_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_JS-kNc1Bfl_",
        "outputId": "34915fdc-9892-4bf4-a220-8830387b5499"
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
            "  \"\"\"\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-1.0576983 , -0.91860345, -0.55688123, ..., -0.21908163,\n",
              "         0.50963994, -1.11361878],\n",
              "       [-0.01230945, -0.01074302, -0.06048579, ...,  0.42746295,\n",
              "         1.288757  ,  1.35944092],\n",
              "       [ 1.55577381,  0.89711742,  1.42870055, ..., -2.15871536,\n",
              "         0.50963994,  1.35944092],\n",
              "       ...,\n",
              "       [-0.01230945,  0.29187713, -0.55688123, ...,  0.42746295,\n",
              "        -0.26947711, -0.49535386],\n",
              "       [-0.01230945,  1.19973756, -0.55688123, ..., -0.21908163,\n",
              "        -1.4381527 ,  0.12291107],\n",
              "       [ 0.51038497,  0.59449727,  0.43590966, ..., -0.21908163,\n",
              "         0.89919847,  0.12291107]])"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X = scaled_data\n",
        "Y = df['class']\n",
        "\n",
        "# We split the data 20/80 for testing and training\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20, random_state = 0)"
      ],
      "metadata": {
        "id": "lzCPNRaUpifF"
      },
      "execution_count": 158,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# to use models, cannot be an array\n",
        "X_model = df_dropped\n",
        "Y_model = df['class']"
      ],
      "metadata": {
        "id": "ddypcku8FqcF"
      },
      "execution_count": 159,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Classification Models"
      ],
      "metadata": {
        "id": "o3yJe-GfpNz3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pipeline"
      ],
      "metadata": {
        "id": "8aNBqtPUqp5K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline, make_pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.impute import KNNImputer\n",
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler, OrdinalEncoder, MinMaxScaler\n",
        "from sklearn.model_selection import cross_val_score, KFold\n",
        "\n",
        "\n",
        "num_cols = ['x-box', 'y-box', 'width', 'high', 'onpix', 'x-bar', 'y-bar', 'x2bar', 'y2bar', 'xybar', 'x2ybr', 'xy2br', 'x-ege', 'xegvy', 'y-ege', 'yegvx']\n",
        "\n",
        "num_transformer = Pipeline(steps=[\n",
        "    # Number of neighboring samples to use for K-nearest neighor imputation\n",
        "    ('imputer', KNNImputer(n_neighbors=5)),\n",
        "\n",
        "    # StandardScaler makes mean = 0 and scales the data to unit variance \n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "########## Finally, apply column transformations\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', num_transformer, num_cols)\n",
        "    ])"
      ],
      "metadata": {
        "id": "I8Gcnv8-qq8D"
      },
      "execution_count": 160,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_folds = 5"
      ],
      "metadata": {
        "id": "u80GBga7rvlg"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def cross_validate_model (classifier_model, X_model, Y_model):\n",
        "              kfold = KFold(n_splits=3, shuffle=True, random_state=10)\n",
        "\n",
        "               # perform model cross validation on the shuffled folds\n",
        "              results = cross_val_score(classifier_model, X_model, Y_model, cv=kfold)\n",
        "\n",
        "              # return the mean score for all folds\n",
        "              return results.mean()"
      ],
      "metadata": {
        "id": "-vxidJ7xu6DD"
      },
      "execution_count": 162,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Decision Tree"
      ],
      "metadata": {
        "id": "8IcKwxcesY2k"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decision Tree (Gini)"
      ],
      "metadata": {
        "id": "SWDREYSZqepa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "########## A decicion tree with gini\n",
        "gini_dt_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                      ('classifier', DecisionTreeClassifier(criterion='gini'))])\n",
        "\n",
        "gini_CV_res = cross_validate_model(gini_dt_clf, X_model, Y_model)"
      ],
      "metadata": {
        "id": "QYxz6lvFqeOY"
      },
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decision Tree (Entropy)"
      ],
      "metadata": {
        "id": "XBKAac9QsOtu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "########## A decicion tree with entropy\n",
        "entropy_dt_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                      ('classifier', DecisionTreeClassifier(criterion='entropy'))])\n",
        "\n",
        "entropy_CV_res = cross_validate_model(entropy_dt_clf, X_model, Y_model)"
      ],
      "metadata": {
        "id": "1DNynuF7sQ78"
      },
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### SVC\n"
      ],
      "metadata": {
        "id": "04BeMYMvsb2t"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "SVC Linear Kernel"
      ],
      "metadata": {
        "id": "AJpsUG5Asgn6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "########## A linear kernel classifier\n",
        "lin_svc_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                      ('classifier', SVC(kernel='linear' ,random_state=42))])\n",
        "\n",
        "lin_svc_CV_res = cross_validate_model(lin_svc_clf, X_model, Y_model)"
      ],
      "metadata": {
        "id": "YHdZmK1ysiGj"
      },
      "execution_count": 165,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "SVC Poly Kernel"
      ],
      "metadata": {
        "id": "V4ETNaq0skZd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "########## A poly kernel classifier\n",
        "poly_svc_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                      ('classifier', SVC(kernel='poly' ,random_state=42))])\n",
        "\n",
        "poly_svc_CV_res = cross_validate_model(poly_svc_clf, X_model, Y_model)"
      ],
      "metadata": {
        "id": "b8e46KM6smhl"
      },
      "execution_count": 142,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "SVC RBF Kernel"
      ],
      "metadata": {
        "id": "fI8IDC0UsnxP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "########## A RBF kernel classifier\n",
        "RBF_svc_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                      ('classifier', SVC(kernel='rbf' ,random_state=42))])\n",
        "\n",
        "RBF_svc_CV_res = cross_validate_model(RBF_svc_clf, X_model, Y_model)"
      ],
      "metadata": {
        "id": "FYv7bay3sqKg"
      },
      "execution_count": 143,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Random Forest"
      ],
      "metadata": {
        "id": "3kUd8d9Xys-4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "########## A random forest\n",
        "rf_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                      ('classifier', RandomForestClassifier())])\n",
        "\n",
        "rf_CV_res = cross_validate_model(rf_clf, X_model, Y_model)"
      ],
      "metadata": {
        "id": "bYrzTYOgyvQP"
      },
      "execution_count": 144,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Extra Trees"
      ],
      "metadata": {
        "id": "ndQUsvkey_IJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import ExtraTreesClassifier\n",
        "\n",
        "########## Extra trees\n",
        "et_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                      ('classifier', ExtraTreesClassifier())])\n",
        "\n",
        "et_CV_res = cross_validate_model(et_clf, X_model, Y_model)"
      ],
      "metadata": {
        "id": "UFPF5sFKzA7i"
      },
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### SGD\n"
      ],
      "metadata": {
        "id": "7Wkn8IfwzYVc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import SGDClassifier\n",
        "\n",
        "########## SGD\n",
        "sgd_clf = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                      ('classifier', SGDClassifier())])\n",
        "\n",
        "sgd_CV_res = cross_validate_model(sgd_clf, X_model, Y_model)"
      ],
      "metadata": {
        "id": "YJ6f4lhKzac8"
      },
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Voting Classifier\n"
      ],
      "metadata": {
        "id": "oGCLvuwMzyB0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import VotingClassifier\n",
        "\n",
        "voting_clf = VotingClassifier(estimators=[('dt_gini', gini_dt_clf), ('dt_entropy', entropy_dt_clf), ('lin_svc', lin_svc_clf), ('poly_svc', poly_svc_clf), ('RBF_svc', RBF_svc_clf), ('rf', rf_clf), ('et', et_clf), ('sgd',sgd_clf)])\n",
        "\n",
        "voting_CV_res = cross_validate_model(voting_clf, X_model, Y_model)"
      ],
      "metadata": {
        "id": "KJwPZ9CLz5wC"
      },
      "execution_count": 147,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Results"
      ],
      "metadata": {
        "id": "8xxTUAreKYuG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "results = [gini_CV_res, entropy_CV_res, lin_svc_CV_res, poly_svc_CV_res, RBF_svc_CV_res, rf_CV_res, et_CV_res, sgd_CV_res, voting_CV_res]\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "fig = plt.figure()\n",
        "ax = fig.add_axes([0,0,1,1])\n",
        "tests = ['gini', 'entropy', 'lin svc', 'poly svc', 'RBF svc', 'rand for', 'extra tree', 'sgd', 'voting']\n",
        "ax.bar(tests,results)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "lmbDMoWlKabx",
        "outputId": "e35236cd-1e10-41de-b5cb-3327bbe70429"
      },
      "execution_count": 166,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(rf_CV_res)\n",
        "print(et_CV_res)\n",
        "print(voting_CV_res)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4gLqFc3oxTeP",
        "outputId": "76c76ef0-5d6e-42a7-dac2-f136e84da10a"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9566499022783633\n",
            "0.9672999923361166\n",
            "0.9564500322838644\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here we see all the models' accuracy plotted. We see that the top preforming models are the random forest, the extra trees, and the voting. Voting has not outpreformed every individual model. The reason for this is that it can over fit when using too many models as can be in this case. Sometimes a simpler solution is a better solution when trying to train and test models. Overly complex models can be less accurate and efficient than a simple model. "
      ],
      "metadata": {
        "id": "R6RGCLhFxGyU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Feature importances"
      ],
      "metadata": {
        "id": "J0TBHcIqyZvI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "forest = RandomForestClassifier()\n",
        "forest.fit(X_model, Y_model)\n",
        "\n",
        "importances = forest.feature_importances_\n",
        "std = np.std([tree.feature_importances_ for tree in forest.estimators_], axis=0)\n",
        "\n",
        "feature_names = ['x-box', 'y-box', 'width', 'high', 'onpix', 'x-bar', 'y-bar', 'x2bar', 'y2bar', 'xybar', 'x2ybr', 'xy2br', 'x-ege', 'xegvy', 'y-ege', 'yegvx']\n",
        "forest_importances = pd.Series(importances, index=feature_names)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "forest_importances.plot.bar(yerr=std, ax=ax)\n",
        "ax.set_title(\"Feature importances using MDI\")\n",
        "ax.set_ylabel(\"Mean decrease in impurity\")\n",
        "fig.tight_layout()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "SVB_rBrLycOh",
        "outputId": "ca22b512-3b22-4ef3-8418-e75290f93210"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "the above graph shows that the most important features are the x-ege (the number of edges from left to right) and the y-ege (the number of edges from top to bottom). These values indicate which of these features have the most impact when it comes to the model guessing the target value (in this case the class). All trees will not have the same importance of features since they will be trained differently, and look at the data in a different way. "
      ],
      "metadata": {
        "id": "oBVMcSpG1pxM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## K Means"
      ],
      "metadata": {
        "id": "sLWJt8xfw8XY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "\n",
        "k= 10\n",
        "kmeans = KMeans(n_clusters=k, random_state=42)"
      ],
      "metadata": {
        "id": "LcKtLIGID2UH"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans.fit(X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DsRCcY8REaOG",
        "outputId": "f3cc6753-a5df-45a5-f843-3b582236ad78"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(n_clusters=10, random_state=42)"
            ]
          },
          "metadata": {},
          "execution_count": 184
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans.inertia_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cQqflO2aElEG",
        "outputId": "f1291a7c-3395-4b6d-e3b7-9f47fc4bf9c0"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "168268.67163705506"
            ]
          },
          "metadata": {},
          "execution_count": 185
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans_per_k = [KMeans(n_clusters=k, random_state=42).fit(X)\n",
        "                for k in range(1, 25)]\n",
        "inertias = [model.inertia_ for model in kmeans_per_k]"
      ],
      "metadata": {
        "id": "uZJCn-pBFDoX"
      },
      "execution_count": 186,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 3.5))\n",
        "plt.plot(range(1, 25), inertias, \"bo-\")\n",
        "plt.xlabel(\"$k$\", fontsize=14)\n",
        "plt.ylabel(\"Inertia\", fontsize=14)\n",
        "plt.annotate('Elbow',\n",
        "             xy=(4, inertias[3]),\n",
        "             xytext=(0.55, 0.55),\n",
        "             textcoords='figure fraction',\n",
        "             fontsize=16,\n",
        "             arrowprops=dict(facecolor='black', shrink=0.1)\n",
        "            )\n",
        "plt.axis([1, 25, 120000, 350000])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "MLamfBnBFG1p",
        "outputId": "d20850ef-0080-4d5e-d73d-dca62e8c3bcb"
      },
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x252 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score\n",
        "\n",
        "silhouette_score(X, kmeans.labels_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XK2WjiX1I7JN",
        "outputId": "9837f15e-4ca3-4960-c4cd-7b00854f2fab"
      },
      "execution_count": 192,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.13959309688855684"
            ]
          },
          "metadata": {},
          "execution_count": 192
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "silhouette_scores = [silhouette_score(X, model.labels_)\n",
        "                     for model in kmeans_per_k[1:]]"
      ],
      "metadata": {
        "id": "IwSwHiGWI-my"
      },
      "execution_count": 193,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "silhouette_scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eO0p5LduJ7YA",
        "outputId": "ed469690-449a-4538-8421-a016cde86fa7"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.16074811794950652,\n",
              " 0.1512944565181951,\n",
              " 0.12371042295778754,\n",
              " 0.13174197872941096,\n",
              " 0.13623569936182328,\n",
              " 0.13375217954115207,\n",
              " 0.13952178657333172,\n",
              " 0.13819795030672755,\n",
              " 0.13959309688855684,\n",
              " 0.14280817426152698,\n",
              " 0.14661802186934433,\n",
              " 0.1487749269522235,\n",
              " 0.14528073579521078,\n",
              " 0.14535053870872106,\n",
              " 0.14597417546352118,\n",
              " 0.13680819370268021,\n",
              " 0.13946293322602443,\n",
              " 0.14154943939564987,\n",
              " 0.139488435693717,\n",
              " 0.13734800776756725,\n",
              " 0.14323202396659493,\n",
              " 0.1408715951239921,\n",
              " 0.14030682219142232]"
            ]
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 3))\n",
        "plt.plot(range(2, 25), silhouette_scores, \"bo-\")\n",
        "plt.xlabel(\"$k$\", fontsize=14)\n",
        "plt.ylabel(\"Silhouette score\", fontsize=14)\n",
        "plt.axis([1.8, 10.2, 0, 0.5])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 234
        },
        "id": "jRP4GkazJAfK",
        "outputId": "c2ea7bd8-dd94-4044-dd64-27448883c53e"
      },
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x216 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3D Plot"
      ],
      "metadata": {
        "id": "PESiHQop21Cr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig = plt.figure(figsize=(10,10))\n",
        "ax = plt.axes(projection='3d')\n",
        "\n",
        "# Set up data for three-dimensional scattered points; use the 26 labels for color map\n",
        "ax.scatter3D(df['x-ege'], df['y-ege'], df['class'], c=df['class'])\n",
        "\n",
        "# rotate the axes and update the view\n",
        "ax.view_init(30, 45)\n",
        "plt.draw()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 575
        },
        "id": "o4GB-e0423lQ",
        "outputId": "6f6505c1-1b69-4dc9-c931-3c9c0ca17539"
      },
      "execution_count": 204,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From this 3D model, we see that by the density of the points, that there is almost a layering pattern to the data form the two influential steps. The center of the 3D graph show that there is a sense gathering around that area, showing that there is a relationship between the predicted class and these two variables. "
      ],
      "metadata": {
        "id": "XbdH56SkOHSz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Summary\n"
      ],
      "metadata": {
        "id": "jeoLL49V3Aj0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Overall Performance\n",
        "The best performing models were the voting, extra trees, random forest, and the RBF svc. All of these models had accuracy close to 100%. Overall, all of the models had good accuracy above 80% except for sgd which had a accuracy of around 60%."
      ],
      "metadata": {
        "id": "Kas_nhuu3B9S"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**SVC Performance**"
      ],
      "metadata": {
        "id": "xguNIEE8Lavw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Between the three kernels used (linear, ploy, RBF), the best was the RBF kernel with an accuracy of around 94%. Then, it was followed by poly kernel with around 85% accuracy and finally linear with a accuracy of around 82%."
      ],
      "metadata": {
        "id": "8ALPGZMqK9r-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Tree Based Performance**"
      ],
      "metadata": {
        "id": "VOhf9PgRLcbW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the decision tree models, entropy was slightly more accuract then gini with both models having an accuracy of around 82%. These models were not the best for this problem as they performed worse than the SVC models. "
      ],
      "metadata": {
        "id": "OWW4IpX1LfJC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Other Models Performance**"
      ],
      "metadata": {
        "id": "VU8klDzfL0HB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The other models used where the random forest, extra trees, voting, and SGD. between these three, random forest, voting, and extra trees were the most accurate out of all models with accuracies of around 95% and 96%. The most accurate model being the extra trees. "
      ],
      "metadata": {
        "id": "mazFt_HFL2hP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Feature Importance**"
      ],
      "metadata": {
        "id": "utIpVMH4MaWs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In determining which features were most prevelant in determining which class to put the data, teh x and y edges were the two most prevelant with x edges being significantly larger. The least important features were hight, width, and onpix. These features importances are significant because they allow for us to see which features are neccessary to look at when training models and which we can ignore. This helps us be more percise with creating and training models based on data. "
      ],
      "metadata": {
        "id": "Lnl7GLbiMjnL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### K-Means"
      ],
      "metadata": {
        "id": "H4ukGcLYNRJw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using k-means, it showed that the best number of clusters for this data was 4 (as seen in the elbow plot). But, what was interesting was that the silhouette graph shows that at k=4, the graph is at the lowest. This is interesting since this is the opposite result of what we would expect looking at the elbow graph.  "
      ],
      "metadata": {
        "id": "hHkJEMB-NTVC"
      }
    }
  ]
}
